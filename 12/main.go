package main

/*
	Highly divisible triangular number
	Problem 12

	The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

	Let us list the factors of the first seven triangle numbers:

	 1: 1
	 3: 1,3
	 6: 1,2,3,6
	10: 1,2,5,10
	15: 1,3,5,15
	21: 1,3,7,21
	28: 1,2,4,7,14,28
	We can see that 28 is the first triangle number to have over five divisors.

	What is the value of the first triangle number to have over five hundred divisors?

	https://projecteuler.net/problem=12
*/
func main() {

}

type Result struct {
	divisors []int
	number   int
}

func HighlyDivisibleTriangularNumber(moreThan int) *Result {
	res := &Result{
		divisors: []int{},
		number:   0,
	}

	cur := 1
	i := 2
	for {
		cur += i
		i++

		divisiors := findDivisors(cur)
		if len(divisiors) > moreThan {
			res.divisors = divisiors
			res.number = cur
			break
		}
	}

	return res
}

func findDivisors(cur int) []int {
	var divisors []int
	for i := 1; i <= cur; i++ {
		if cur%i == 0 {
			divisors = append(divisors, i)
		}
	}

	return divisors
}

func HighlyDivisibleTriangularNumber2(moreThan int) *Result {
	res := &Result{
		divisors: []int{},
		number:   0,
	}

	cur := 1
	i := 2
	for {
		cur += i
		i++

		num := findDivisors2(cur)
		if num > moreThan {
			res.number = cur
			break
		}
	}

	return res
}

/*
	Using some math
 */
func findDivisors2(cur int) int {
	var n = cur
	var i = 2
	var p = 1

	if cur == 1 {
		return 1
	}

	for i*i <= n {
		var c = 1
		for n%i == 0 {
			n /= i
			c++
		}
		i++
		p *= c
	}

	if n == cur || n > 1 {
		p *= 1 + 1
	}

	return p
}
