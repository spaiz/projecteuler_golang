package main

/*
	Even Fibonacci numbers

	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

	https://projecteuler.net/problem=2
*/

func main() {
	res1 := Fib1(1, 2, 4000000, 0)
	println(res1)
	res2 := Fib2(1, 2, 4000000)
	println(res2)
	res3 := Fib3(1, 2, 4000000)
	println(res3)
}

func Fib1(i, j, max, sum int) int {
	term := i + j
	if term%2 == 0 {
		sum += term
	}

	if j >= max {
		return sum
	}

	return Fib1(j, term, max, sum)
}

func Fib2(i, j, max int) int {
	curr := i
	term := j
	sum := 0

	for term <= max {
		temp := term
		term = curr + term
		curr = temp

		if term%2 == 0 {
			sum += term
		}
	}

	return sum
}

func Fib3(i, j, max int) int {
	arr := []int{i, j}
	sum := 0

	for i := 2; arr[i-1] <= max; i++ {
		term := arr[i-2] + arr[i-1]
		arr = append(arr, term)
		if term%2 == 0 {
			sum += term
		}
	}

	return sum
}
